/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.91
 * Generated at: 2024-07-16 06:10:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import kr.co.iei.member.model.dto.Member;

public final class updateFrm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("kr.co.iei.member.model.dto.Member");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");

    	Member m = (Member)request.getAttribute("m");
    
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h1>회원 정보 수정</h1>\r\n");
      out.write("	<hr>\r\n");
      out.write("	<form action=\"/updateMember\" method=\"post\">\r\n");
      out.write("	<table border=\"1\">\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>회원번호</th>\r\n");
      out.write("			<td>\r\n");
      out.write("				<input type=\"text\" name=\"memberNo\" id=\"memberNo\" value=\"");
      out.print(m.getMemberNo() );
      out.write("\" readonly>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("			<th>아이디</th>\r\n");
      out.write("			<td>\r\n");
      out.write("				");
      out.print(m.getMemberId() );
      out.write("\r\n");
      out.write("				<input type=\"hidden\" name=\"memberId\" value=\"");
      out.print(m.getMemberId() );
      out.write("\">\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("			<th>비밀번호</th>\r\n");
      out.write("			<td>\r\n");
      out.write("				<input type=\"password\" name=\"memberPw\" id=\"memberPw\" value=\"");
      out.print(m.getMemberPw());
      out.write("\">\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("			<th>이름</th>\r\n");
      out.write("			<td>\r\n");
      out.write("				<input type=\"text\" name=\"memberName\" id=\"memberId\" value=\"");
      out.print(m.getMemberName());
      out.write("\" readonly>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("			<th>전화번호</th>\r\n");
      out.write("			<td>\r\n");
      out.write("				<input type=\"text\" name=\"memberPhone\" id=\"memberPhone\" value=\"");
      out.print(m.getMemberPhone());
      out.write("\">\r\n");
      out.write("				\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("			<th>주소</th>\r\n");
      out.write("			<td>\r\n");
      out.write("				<input type=\"text\" name=\"memberAddr\" id=\"memberAddr\" value=\"");
      out.print(m.getMemberAddr());
      out.write("\">\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("			<th>회원등급</th>\r\n");
      out.write("			");
if(m.getMemberLevel()==1) {
      out.write("\r\n");
      out.write("			<td>관리자</td>\r\n");
      out.write("			");
}else if(m.getMemberLevel()==2) {
      out.write("\r\n");
      out.write("			<td>정회원</td>\r\n");
      out.write("			");
}else if(m.getMemberLevel()==3) {
      out.write("\r\n");
      out.write("			<td>준회원\r\n");
      out.write("			");
} 
      out.write("			\r\n");
      out.write("		</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("			<th>가입일</th>\r\n");
      out.write("			<td>");
      out.print(m.getEnrollDate());
      out.write("</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("		 	<th colspan=\"2\">\r\n");
      out.write("		 		<input type=\"submit\" value=\"수정하기\">\r\n");
      out.write("		 	</th>\r\n");
      out.write("	</table>\r\n");
      out.write("	</form>	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
