package kr.co.iei.chat.model.service;

import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import com.fasterxml.jackson.databind.ObjectMapper;

import kr.co.iei.chat.model.dto.ChatDTO;

@Component
public class AllMemberChatHandler extends TextWebSocketHandler {
	
	//클라이언트가 소켓에 접속하면 자동으로 호출되는 메소드
	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception {
		System.out.println("클라이언트 접속 : " + session); //웹소켓session
	}
	
	//클라이언트가 소켓으로 데이터가 전송하면 자동으로 호출되는 메소드 
	@Override
	protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
	System.out.println("메세지를 보낸 클라이언트 : " +session);
	System.out.println(message.getPayload());
	//클라이언트가 보낸 메세지는 json => 문자열로 변환해서 전송
	//문자열형태로 가지고있으면 구분해서 사용하기가 힘듬 - > JAVA의 객체형태로 변환
	ObjectMapper om = new ObjectMapper();
	ChatDTO chat = om.readValue(message.getPayload(), ChatDTO.class);
	
	}
	
	//클라이언트가 소켓에서 접속이 끊어지면 자동으로 호출되는 메소드 
	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
		System.out.println("클라이언트 접속 끊김 :" +session);
	}

}
